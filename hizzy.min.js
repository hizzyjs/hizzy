#!/usr/bin/env node
const random=()=>crypto.getRandomValues(new BigUint64Array([0n]))[0].toString(36),self=module.exports={defineConfig:e=>e||{}},sT=Date.now(),fs=(global.__sT__=sT,global.__PRODUCT__="hizzy",global.__PRODUCT_U__="Hizzy",global.__VERSION__=require("./package.json").version,require("fs")),crypto=require("crypto"),dotenv=require("dotenv"),path=require("path"),os=require("os"),url=require("url"),argv=process["argv"],exit=(require("fancy-printer").makeGlobal(!0),dotenv.config(),(...e)=>{printer.dev.error(...e),process.exit(1)}),checkDefault=(printer.title(__PRODUCT_U__+" v"+__VERSION__),printer.makeGlobal(!0).setOptions({format:e=>printer.css("color: "+printer.getTag(e.tag||"log").c)+"  %tag  %time %stack > %text",timeBackgroundColor:"",timeColor:"",stackColor:"",filenameColor:"",lineColor:"",columnColor:"",timePadding:0,tagPadding:0,styleSubstitutionsEnabled:!0}),printer.dev=printer.create({format:e=>printer.css("color: "+printer.getTag(e.tag||"log").c)+"  %tag  %text",tagPadding:0,styleSubstitutionsEnabled:!0}),printer.tags=printer.dev.tags={pass:{text:"✓",c:"greenBright",textColor:"green"},fail:{text:"X",c:"redBright",textColor:"redBright"},error:{text:"",c:"red",textColor:"red"},warn:{text:"✩",c:"yellow",textColor:"yellow"},info:{text:"?",c:"blueBright",textColor:"blue"},debug:{text:"~",c:"gray",textColor:"gray"},notice:{text:"!",c:"cyanBright",textColor:"cyan"},log:{text:'"',c:"gray",textColor:"white"},assert:{text:">",c:"white",textColor:"gray"}},printer.inline.options.format="%text",Object.keys(printer.styles).forEach(e=>{"t"!==e&&(delete printer.styles[e],delete printer.dev.styles[e])}),(e,r={},t=[])=>{var o,i=[];for(const n in r)void 0===e[n]?(e[n]=r[n],i.push([...t,n])):e[n].constructor===Object&&"addons"!==n&&"static"!==n&&(o=checkDefault(e[n],r[n],[...t,n]),i.push(...o));return i}),isTerminal=require.main===module;isTerminal||exit(__PRODUCT_U__+"'s module mode has not been developed yet. Its API can still be reached by importing/requiring '"+__PRODUCT__+"/api'.");let dir=process.cwd(),file;const args=argv.slice(2).filter(e=>!e.startsWith("-")),optList=argv.slice(2).filter(e=>e.startsWith("-")),_argv_={},shortcuts={"-h":"help","-v":"version","-b":"build","-p":"port","-d":"dev","-o":"open","-c":"config","-f":"force"};if(optList.forEach(e=>{e=e.split("=");let r=e[0].toLowerCase();(r=shortcuts[r]?"--"+shortcuts[r]:r).startsWith("--")&&(_argv_[r.substring(2)]=e[1]&&e.slice(1).join("=")||!0)}),Object.freeze(_argv_),self.args=_argv_,isTerminal&&_argv_.help&&(printer.raw.log("%c  "+__PRODUCT_U__+" v"+__VERSION__,"color: yellow"),printer.println(""),printer.raw.log("%c  Usage: "+__PRODUCT__+" [root]","color: magenta"),printer.println(""),printer.raw.log("%c  Options:","color: orange"),printer.raw.log("%c    -h, --help%c               shows this page","color: green","color: yellow"),printer.raw.log("%c    -v, --version%c            shows the version","color: green","color: yellow"),printer.raw.log("%c    --advanced-version%c       shows advanced information","color: green","color: yellow"),printer.raw.log("%c    -b, --build%c              only builds the project and exits","color: green","color: yellow"),printer.raw.log("%c    --host%c                   toggles the view of IPv4","color: green","color: yellow"),printer.raw.log("%c    --config=PATH%c            sets the config file's path","color: green","color: yellow"),printer.raw.log("%c    -p=PORT, --port=PORT%c     sets the port (0 = random)","color: green","color: yellow"),printer.raw.log("%c    -f, --force%c              forces auto build","color: green","color: yellow"),printer.raw.log("%c    -d, --dev%c                enables developer mode","color: green","color: yellow"),printer.raw.log("%c    -o, --open%c               opens the app on start","color: green","color: yellow"),printer.raw.log("%c    --debug%c                  enables debug messages","color: green","color: yellow"),printer.raw.log("%c    --debug-socket%c           sends debug messages of sockets","color: green","color: yellow"),printer.raw.log("%c    --injections%c             builds html/jsx injection files","color: green","color: yellow"),printer.raw.log("%c    --addon-init%c             initializes up an addon environment","color: green","color: yellow"),printer.raw.log("%c    --no-clear%c               disables the initial screen clear","color: green","color: yellow"),printer.raw.log("%c    --ts%c                     makes it prefer default TypeScript files","color: green","color: yellow"),process.exit()),isTerminal&&_argv_.version&&(printer.raw.log(__PRODUCT_U__+" v"+__VERSION__),process.exit()),isTerminal&&_argv_["advanced-version"]&&(printer.raw.log(`${__PRODUCT__}: v${__VERSION__}
node: ${process.version}
device: ${os.platform()}-`+os.arch()),process.exit()),isTerminal&&_argv_["addon-init"]){const r=args[0]||process.cwd().split(path.sep).slice(-1)[0],s=path.join(process.cwd(),args[0]||"");/^(?:@[a-z0-9-*~][a-z0-9-*._~]*\/)?[a-z0-9-~][a-z0-9-._~]*$/.test(r)||exit("Please select a valid addon name!"),fs.existsSync(s)&&exit("There is already a directory at '%c"+s+"&t'!","color: orange"),fs.mkdirSync(s),fs.writeFileSync(path.join(s,"index.js"),`const {AddonModule} = Hizzy;
module.exports = class MyAddon extends AddonModule {
    onLoad() {
        this.log("Loaded!");
    };

    onEnable() {
        this.log("Enabled!");
    };

    onDisable(reason) {
        this.log("Disabled for the reason:", reason);
    }

    onClientSideLoad() {
        this.log("Addon has been loaded in client side!");
    };

    onClientSideRendered() {
        this.log("A page has been rendered in the client side!");
    };

    onClientSideError(error) {
        this.log("An error occurred in the client side:", error);
    };
};`),fs.writeFileSync(path.join(s,"package.json"),`{
  "name": ${JSON.stringify(r)},
  "description": "This is an addon!",
  "version": "1.0.0",
  "main": "index.js"
}`),printer.dev.pass("A new addon has been set up at '%c"+s+"&t'!","color: orange"),process.exit()}if(_argv_.build||_argv_["no-clear"]||(printer.clear(),printer.print("\n")),isTerminal&&args[0]){const t=path.join(process.cwd(),args[0]);fs.existsSync(t)||exit("Couldn't open the file %c'"+t+"'%c.","color: orange","color: red"),dir=fs.statSync(t).isDirectory()?t:(file=t,path.dirname(t))}(async()=>{var e={dev:!0,port:1881,fileRefresh:!0,autoBuild:!0,listen:!0,main:_argv_.ts?"Server.tsx":"Server.jsx",mainModule:!0,baseHTML:"index.html",allowAllPackages:!1,checkConfig:!0,realtime:!0,static:{},https:!1,srcFolder:"src",connectionTimeout:6e4,keepaliveTimeout:3e4,clientKeepalive:2e4,minClientKeepalive:8e3,addons:[],includeOriginalInBuild:!0,cache:{addons:0,npm:0,preact:0,"preact-hooks":0,"html-injection":0,"jsx-injection":0,static:{}},warnAboutTypes:!0};let r=_argv_.config;if(r&&!fs.existsSync(path.join(dir,r)))return exit("Config file %c"+r+"&t given in the command line arguments is invalid:","color: orange");var t=["json","config.json","config.ts","config.js"];if(_argv_.ts?t.push("config.mjs","config.mts"):t.push("config.mts","config.mjs"),!r)for(const g of t)if(r=__PRODUCT__+"."+g,fs.existsSync(path.join(dir,r)))break;_argv_.ts&&!fs.existsSync(path.join(dir,"tsconfig.json"))&&(_argv_.debug&&printer.dev.debug("Creating the %c/tsconfig.json&t file...","color: orange"),fs.writeFileSync(path.join(dir,"tsconfig.json"),fs.readFileSync(path.join(__dirname,"tsconfig.json"))));var t=path.join(dir,r),o=fs.existsSync(t);o&&fs.statSync(t).isFile()||(o&&fs.rmSync(t),_argv_.debug&&printer.dev.debug("Creating the %c/"+r+"&t file...","color: orange"),fs.writeFileSync(t,`export default Hizzy.defineConfig({${_argv_.ts?`
    main: "Server.tsx"
`:""}});`));let i;if(r.endsWith(".json"))try{i=JSON.parse(fs.readFileSync(t,"utf8"))}catch(e){return exit("Invalid JSON in the file %c'"+t+"'%c: %c"+e.toString()+"%c.","color: orange","color: red","color: orange","color: red")}else if(r.endsWith(".js")||r.endsWith(".mjs")||r.endsWith(".ts")||r.endsWith(".mts"))if(global[__PRODUCT_U__]={defineConfig:e=>e||{}},r.endsWith(".js")||r.endsWith(".mjs"))i=(await import(url.pathToFileURL(t))).default;else{o=path.join(path.dirname(t),random()+"."+(r.endsWith(".mts")?"m":"")+"js");fs.writeFileSync(o,require("@babel/core").transformSync(fs.readFileSync(t),{filename:path.basename(t),presets:[require("@babel/preset-typescript")]}).code);try{i=(await import(url.pathToFileURL(o))).default}finally{fs.rmSync(o)}}"function"==typeof i&&await i({argv:_argv_,isDev:!!_argv_.dev});var o=i.checkConfig,n=checkDefault(i,e);if(!_argv_.build&&n.length&&o&&r.endsWith(".json")&&(fs.writeFileSync(t,JSON.stringify(i,null,2)),printer.dev.warn("Updated following properties in "+__PRODUCT__+".json: "+n.map(e=>e.join("->")).join(", "))),Array.isArray(i.extensionRemovals)||(i.extensionRemovals=e.extensionRemovals),i.extensionRemovals=[...new Set(i.extensionRemovals)],-1!==i.keepaliveTimeout&&i.clientKeepalive>=i.keepaliveTimeout)return exit("Config's 'clientKeepalive' property has to be smaller than 'keepaliveTimeout'.");if(Array.isArray(i.static)){o=i.static;i.static={};for(const p of o)i.static[p]=p}if((self.config=i).warnAboutTypes)try{require(dir+"/node_modules/@hizzyjs/types");var s=require(dir+"/node_modules/@hizzyjs/types/package.json")["version"],a=require("./package.json").version;s!==a&&printer.dev.warn(`The installed %c@hizzyjs/types@${s}&t's version don't match the version of%c hizzy@${a}&t, please consider updating. %cYou can disable this by setting 'warnAboutTypes' to false in the config file.`,"color: orange","color: orange","color: gray")}catch(e){}_argv_.debug||(printer.options.disabledTags.push("debug"),printer.dev.options.disabledTags.push("debug"));var t=fs.existsSync(path.join(dir,".build")),n=path.join(dir,i.srcFolder),e=fs.existsSync(n),o=(e&&fs.statSync(n).isDirectory()||(t?printer.dev.debug("Skipping the creation of %c/"+i.srcFolder+"&t because there is an existing build.","color: orange"):(e&&fs.rmSync(n),printer.dev.debug("Creating the %c/"+i.srcFolder+"&t folder...","color: orange"),fs.mkdirSync(n),fs.writeFileSync(path.join(n,"App."+(_argv_.ts?"t":"j")+"sx"),`const foo = 20;
export default <div>Hello, world! { foo * 2 }</div>`))),self.config=i,path.join(__dirname,"api.js")),s=path.join(__dirname,"api.min.js"),a=(global[__PRODUCT_U__]=new(require(fs.existsSync(o)?o:s))(dir),i.fileRefresh&&(Hizzy.autoRefresh=!0),path.join(dir,i.srcFolder,i.main)),t=path.extname(a);if(fs.existsSync(a)||(e=a.substring(0,a.length-3)+"tsx",".jsx"===t&&fs.existsSync(e)?i.main=i.main.substring(0,i.main.length-3)+"tsx":(printer.dev.debug("Creating the %c/src/"+i.main+"&t file...","color: orange"),fs.writeFileSync(a,`export default <Routes>
    <Route path="/" route="./App.${_argv_.ts?"t":"j"}sx"/>
</Routes>;`))),Object.freeze(i),_argv_.ts&&i.warnAboutTypes&&(n=["react","hizzy"].filter(e=>!fs.existsSync(path.join(dir,"node_modules",e))).map(e=>`'%c${e}&t'`)).length&&(printer.dev.warn(`Please consider installing the package${1<n.length?"s":""} ${n.join(" and ")} for a better coding experience. %cYou can disable this by setting 'warnAboutTypes' to false in the config file.`,...n.map(()=>"color: orange"),"color: gray"),printer.println("")),_argv_.build)_argv_["just-build"]=!0,Hizzy.build().then(()=>process.exit());else{var l=e=>null===e?"null":e&&e.constructor===Array?"array":typeof e;if("object"!=typeof i.addons)return exit("Config's 'conf.addons' property has to be an object or an array, got: "+l(i.addons)+".");if(0<Object.keys(i.addons).length){var c=i.addons;if(Array.isArray(c))for(let e=0;e<c.length;e++){var d=c[e];if("string"==typeof d||d instanceof Hizzy.AddonModule)await Hizzy.Addon.create(d,{});else{if(!Array.isArray(d))return exit("Config's 'conf.addons["+e+"]' property should either be an array or a string, got: "+l(k));if(d[1]&&d[1].constructor!==Object)return exit("Config's 'conf.addons["+e+"][1]' property should be an object or empty, got: "+l(d[1]));await Hizzy.Addon.create(d[0],d[1])}}else for(const k in c){if(c[k].constructor!==Object)return exit("Config's 'conf.addons["+k+"] property should be an object, got: "+l(c[k]));await Hizzy.Addon.create(k,c[k])}}await Hizzy.init(),!i.dev||void 0!==_argv_.dev&&["false","no","f","n"].includes(_argv_.dev)||(Hizzy.dev=!0,await Hizzy.processDevMain()),i.realtime&&Hizzy.enableRealtime(),Hizzy.dev?i.listen&&Hizzy.listen().then(e=>e):_argv_.build||i.autoBuild||_argv_.force?Hizzy.build().then(e=>e):i.listen&&Hizzy.scanBuild().then(e=>e)}})();